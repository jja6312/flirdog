plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id "com.github.node-gradle.node" version "4.0.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// 기본적으로 필요한 스프링부트 의존성
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//MyBatis
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'
	//DB
	runtimeOnly 'com.mysql:mysql-connector-j'
	//Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	//Devtools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.2'

	// File upload
    implementation 'commons-fileupload:commons-fileupload:1.4'
    implementation 'commons-io:commons-io:2.8.0'

	//jakarta
	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

	//junit5
	testImplementation 'org.assertj:assertj-core:3.24.2'

	//kafka
	implementation 'org.apache.kafka:kafka-clients:3.3.2'

	//loging
	implementation  'org.slf4j:slf4j-simple:1.7.30'

	//s3
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'
}

tasks.named('test') {
	useJUnitPlatform()
}


//React build 설정
def reactAppDir = "${projectDir}/src/main/webapp"

processResources {
	// task간의 의존성 정의
	// processResources task 실행되기 전에 copyReactFile task를 먼저 실행한다.
	dependsOn "copyReactFile"
}

task copyReactFile(type: Copy) {
	dependsOn "buildReact"
	from "$reactAppDir/build"
	into "$projectDir/src/main/resources/static/"
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$reactAppDir"
	inputs.dir "$reactAppDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {	
		commandLine "npm.cmd", "run-script", "build"
	} else {	
		commandLine "npm", "run-script", "build"
	}
}

task installReact(type: Exec) {
	workingDir "$reactAppDir"
	inputs.dir "$reactAppDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "audit", "fix"
		commandLine "npm", "install"
	}
}